// <auto-generated />
using System;
using MatFrem.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatFrem.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20241209174621_InitialCreationLaptop")]
    partial class InitialCreationLaptop
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DriverModel", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DriverID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DriverID");

                    b.ToTable("DriverModel");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.AdviceModel", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("AdviceMessage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PostId");

                    b.ToTable("Advice");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59cc81cc-4442-4312-a65e-52c3155f35d4",
                            Email = "sysadmin@test.com",
                            EmailConfirmed = false,
                            FirstName = "System",
                            LastName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSADMIN@TEST.COM",
                            NormalizedUserName = "SYSADMIN@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKT/zP/Ztb7j9BCH7TXYBu3FDg6CliI4PIcDL8O21EIuKPwujJKK9AQ4Un15RY1Keg==",
                            PhoneNumber = "40748608",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f23e3f6-a767-46c1-8e31-3c0f9d6b78a0",
                            TwoFactorEnabled = false,
                            UserName = "sysadmin@test.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29cc20d4-7d21-4230-8181-0c88502a0524",
                            Email = "driver@test.com",
                            EmailConfirmed = false,
                            FirstName = "Test",
                            LastName = "Driver",
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER@TEST.COM",
                            NormalizedUserName = "DRIVER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAEZ1NhVWmhHOiyflukiOC+pwLZmRqLcnPyqHNI4cs+cS7V00WI/mvL47Dcv6IGlxQ==",
                            PhoneNumber = "95534356",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7af6604-8005-43b8-8f2d-08f3ec7760aa",
                            TwoFactorEnabled = false,
                            UserName = "driver@test.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8c8a9c8-9a5a-4d3a-87d5-551444687313",
                            Email = "customer@test.com",
                            EmailConfirmed = false,
                            FirstName = "Test",
                            LastName = "Customer",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@TEST.COM",
                            NormalizedUserName = "CUSTOMER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDshjB29G7tDqfMdWlwM9Ixh7sGnw+T25dOSfZOlJ4mGTQsnLsuJMM2lOOl6I1veVw==",
                            PhoneNumber = "43342364",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53e867d2-9316-4887-9542-391163e89596",
                            TwoFactorEnabled = false,
                            UserName = "customer@test.com"
                        });
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.CustomerModel", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<int>("DriverMDriverID")
                        .HasColumnType("int");

                    b.Property<int>("OrdersOrderID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CustomerID");

                    b.HasIndex("DriverMDriverID");

                    b.HasIndex("OrdersOrderID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderModelId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderModelOrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingCartModelShoppingCartID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderModelId");

                    b.HasIndex("OrderModelOrderID")
                        .IsUnique();

                    b.HasIndex("ProductID");

                    b.HasIndex("ShoppingCartModelShoppingCartID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.OrderModel", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerPhoneNr")
                        .HasColumnType("longtext");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("DeliveryFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("DriverId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DriverModelDriverID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("OrderCreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("OrderItem")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("PickUpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductCategory")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductMProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext");

                    b.Property<int?>("ShopModelShopID")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("DriverModelDriverID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("ProductMProductID");

                    b.HasIndex("ShopModelShopID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderStatusID"));

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OrderStatusID");

                    b.ToTable("OrderState");

                    b.HasData(
                        new
                        {
                            OrderStatusID = 1,
                            StatusDescription = "Motatt"
                        },
                        new
                        {
                            OrderStatusID = 2,
                            StatusDescription = "Under behandling"
                        },
                        new
                        {
                            OrderStatusID = 3,
                            StatusDescription = "På vei"
                        },
                        new
                        {
                            OrderStatusID = 4,
                            StatusDescription = "Order avvist"
                        });
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ProductModel", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DriverId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductCalories")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProductLocation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("double");

                    b.Property<int?>("ShoppingCartModelShoppingCartID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("ShoppingCartModelShoppingCartID");

                    b.ToTable("Product_detail");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ShopModel", b =>
                {
                    b.Property<int>("ShopID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ShopID"));

                    b.Property<string>("ShopName")
                        .HasColumnType("longtext");

                    b.HasKey("ShopID");

                    b.ToTable("Shop_detail");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ShoppingCartModel", b =>
                {
                    b.Property<int>("ShoppingCartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ShoppingCartID"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CartSize")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .HasColumnType("longtext");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("DriverId")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductModelProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ShoppingCartID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductModelProductID");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1",
                            Name = "System Administrator",
                            NormalizedName = "SYSADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "2",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "3",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "1",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "1",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderModelProductModel", b =>
                {
                    b.Property<int>("OrderModelOrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("OrderModelOrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderModelProductModel");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.CustomerModel", b =>
                {
                    b.HasOne("DriverModel", "DriverM")
                        .WithMany()
                        .HasForeignKey("DriverMDriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.OrderModel", "Orders")
                        .WithMany()
                        .HasForeignKey("OrdersOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverM");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.OrderItem", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.OrderModel", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.OrderModel", null)
                        .WithOne("OrderItemModel")
                        .HasForeignKey("MatFrem.Models.DomainModel.OrderItem", "OrderModelOrderID");

                    b.HasOne("MatFrem.Models.DomainModel.ProductModel", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.ShoppingCartModel", null)
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartModelShoppingCartID");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.OrderModel", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("DriverModel", null)
                        .WithMany("ActiveDeliveries")
                        .HasForeignKey("DriverModelDriverID");

                    b.HasOne("MatFrem.Models.DomainModel.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.ProductModel", "ProductM")
                        .WithMany()
                        .HasForeignKey("ProductMProductID");

                    b.HasOne("MatFrem.Models.DomainModel.ShopModel", null)
                        .WithMany("OrderModels")
                        .HasForeignKey("ShopModelShopID");

                    b.Navigation("Customer");

                    b.Navigation("Driver");

                    b.Navigation("OrderStatus");

                    b.Navigation("ProductM");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ProductModel", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("MatFrem.Models.DomainModel.ShoppingCartModel", null)
                        .WithMany("Product")
                        .HasForeignKey("ShoppingCartModelShoppingCartID");

                    b.Navigation("Customer");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ShoppingCartModel", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MatFrem.Models.DomainModel.ProductModel", "ProductModel")
                        .WithMany()
                        .HasForeignKey("ProductModelProductID");

                    b.Navigation("ApplicationUser");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderModelProductModel", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.OrderModel", null)
                        .WithMany()
                        .HasForeignKey("OrderModelOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.ProductModel", null)
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DriverModel", b =>
                {
                    b.Navigation("ActiveDeliveries");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.OrderModel", b =>
                {
                    b.Navigation("OrderItemModel");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ShopModel", b =>
                {
                    b.Navigation("OrderModels");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ShoppingCartModel", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
