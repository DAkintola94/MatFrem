// <auto-generated />
using System;
using MatFrem.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatFrem.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20241110214118_InitialCreationThree")]
    partial class InitialCreationThree
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MatFrem.Models.DomainModel.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "820889af-1481-405f-8a47-b4622941d07a",
                            Email = "sysadmin@test.com",
                            EmailConfirmed = false,
                            FirstName = "System",
                            LastName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSADMIN@TEST.COM",
                            NormalizedUserName = "SYSADMIN@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHCkPV4fSzxTQCHizKTg/7KTN1DMe2Ua0f9qVtz6HxJHcnojgOXIX9bLN2LA3iWhhQ==",
                            PhoneNumber = "40748608",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af0d371c-a6d3-496c-899a-db5df154b11f",
                            TwoFactorEnabled = false,
                            UserName = "sysadmin@test.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6879228e-df0b-42f9-bd56-9badb112b52f",
                            Email = "driver@test.com",
                            EmailConfirmed = false,
                            FirstName = "Test",
                            LastName = "Driver",
                            LockoutEnabled = false,
                            NormalizedEmail = "DRIVER@TEST.COM",
                            NormalizedUserName = "DRIVER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGLdoFg712MM9kWP5vPhxhyELXSymAHm3DBtPzeOWgkA/xW+pe/z72d682xJfm4vcQ==",
                            PhoneNumber = "95534356",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdc4afe8-7948-4d24-8dd7-e97608d5e057",
                            TwoFactorEnabled = false,
                            UserName = "driver@test.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0819310a-45fb-46ac-ab20-3ac0aca91327",
                            Email = "customer@test.com",
                            EmailConfirmed = false,
                            FirstName = "Test",
                            LastName = "Customer",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@TEST.COM",
                            NormalizedUserName = "CUSTOMER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECW63POMUQcJy9gL6Rs1AXE9uXp4jqofxotEBhIL63maTK2J3ilcLBxvzdWQo6rckQ==",
                            PhoneNumber = "43342364",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16181e79-cd6a-49e4-a0fa-1a010c178cef",
                            TwoFactorEnabled = false,
                            UserName = "customer@test.com"
                        });
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.CreateAccountModel", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AccountID");

                    b.ToTable("Account_creation");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.CustomerModel", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CustomerID");

                    b.HasIndex("DriverID")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.DriverModel", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DriverID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("LocationReportID")
                        .HasColumnType("char(36)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ShopModelShopID")
                        .HasColumnType("int");

                    b.HasKey("DriverID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("LocationReportID");

                    b.HasIndex("OrderID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("ShopModelShopID");

                    b.ToTable("DriverModel");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.LocationModel", b =>
                {
                    b.Property<Guid>("LocationReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("GeoJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LocationMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("LocationReportID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.OrderModel", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<Guid>("LocationID")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("OrderCreatedDate")
                        .HasColumnType("date");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("ShopID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DriverID");

                    b.HasIndex("LocationID");

                    b.HasIndex("OrderStatusID")
                        .IsUnique();

                    b.HasIndex("ProductID");

                    b.HasIndex("ShopID")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrderStatusID"));

                    b.Property<string>("Order_Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OrderStatusID");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ProductModel", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<Guid?>("LocationReportID")
                        .HasColumnType("char(36)");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("ProductCalories")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("double");

                    b.Property<int?>("ShopID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("LocationReportID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ShopID");

                    b.ToTable("Product_detail");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ShopModel", b =>
                {
                    b.Property<int>("ShopID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ShopID"));

                    b.Property<Guid>("LocationID")
                        .HasColumnType("char(36)");

                    b.Property<string>("PhoneNr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ShopID");

                    b.HasIndex("LocationID");

                    b.ToTable("Shop_detail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1",
                            Name = "System Administrator",
                            NormalizedName = "SYSADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "2",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "3",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "1",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "1",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.CustomerModel", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.DriverModel", "Driver")
                        .WithOne()
                        .HasForeignKey("MatFrem.Models.DomainModel.CustomerModel", "DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.DriverModel", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.CustomerModel", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.LocationModel", "Location")
                        .WithMany()
                        .HasForeignKey("LocationReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.OrderModel", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.ShopModel", "ShopModel")
                        .WithMany()
                        .HasForeignKey("ShopModelShopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Location");

                    b.Navigation("Order");

                    b.Navigation("OrderStatus");

                    b.Navigation("ShopModel");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.OrderModel", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.CustomerModel", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.DriverModel", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.LocationModel", "Location")
                        .WithMany("OrderModels")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.OrderStatus", "OrderStatus")
                        .WithOne()
                        .HasForeignKey("MatFrem.Models.DomainModel.OrderModel", "OrderStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.ProductModel", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.ShopModel", "ShopModel")
                        .WithOne()
                        .HasForeignKey("MatFrem.Models.DomainModel.OrderModel", "ShopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Driver");

                    b.Navigation("Location");

                    b.Navigation("OrderStatus");

                    b.Navigation("Product");

                    b.Navigation("ShopModel");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ProductModel", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.LocationModel", "Location")
                        .WithMany()
                        .HasForeignKey("LocationReportID");

                    b.HasOne("MatFrem.Models.DomainModel.OrderModel", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID");

                    b.HasOne("MatFrem.Models.DomainModel.ShopModel", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopID");

                    b.Navigation("Location");

                    b.Navigation("Order");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.ShopModel", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.LocationModel", "Location")
                        .WithMany("ShopsModel")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MatFrem.Models.DomainModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.CustomerModel", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MatFrem.Models.DomainModel.LocationModel", b =>
                {
                    b.Navigation("OrderModels");

                    b.Navigation("ShopsModel");
                });
#pragma warning restore 612, 618
        }
    }
}
